'use client';

import React, { useState, useEffect } from 'react';
import { 
  ContentSharingInvitation,
  ContentPermission,
  ContentMetadata
} from '@/lib/content-creation/types';
import { getContentCreationService } from '@/lib/content-creation/contentCreationService';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { AlertCircle, Share2, Users, Mail, Check, X } from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Separator } from '@/components/ui/separator';
import { useToast } from '@/components/ui/use-toast';

interface ContentSharingProps {
  contentId: string;
  contentMetadata: ContentMetadata;
  onClose?: () => void;
}

export const ContentSharing: React.FC<ContentSharingProps> = ({
  contentId,
  contentMetadata,
  onClose
}) => {
  const [activeTab, setActiveTab] = useState('invite');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [collaborators, setCollaborators] = useState<any[]>([]);
  const [invitations, setInvitations] = useState<ContentSharingInvitation[]>([]);
  
  // New invitation state
  const [newInvitation, setNewInvitation] = useState<Partial<ContentSharingInvitation>>({
    contentId,
    inviterId: 'current-user-id', // This will be replaced by the actual user ID
    inviteeEmail: '',
    permission: ContentPermission.SHARED_VIEW,
    message: `I'd like to share "${contentMetadata.title}" with you.`,
    status: 'pending'
  });
  
  const { toast } = useToast();
  
  // Load collaborators and invitations
  useEffect(() => {
    const loadSharingData = async () => {
      setIsLoading(true);
      setError(null);
      
      try {
        // This would be replaced with actual API calls
        // For now, we'll use mock data
        
        // Mock collaborators
        setCollaborators([
          {
            id: 'user-1',
            name: 'Jane Smith',
            email: 'jane.smith@example.com',
            avatarUrl: 'https://api.dicebear.com/7.x/avataaars/svg?seed=Jane',
            permission: ContentPermission.SHARED_EDIT,
            joinedAt: new Date(2023, 5, 15)
          },
          {
            id: 'user-2',
            name: 'John Doe',
            email: 'john.doe@example.com',
            avatarUrl: 'https://api.dicebear.com/7.x/avataaars/svg?seed=John',
            permission: ContentPermission.SHARED_VIEW,
            joinedAt: new Date(2023, 6, 20)
          }
        ]);
        
        // Mock invitations
        setInvitations([
          {
            id: 'inv-1',
            contentId,
            inviterId: 'current-user-id',
            inviteeEmail: 'mark.wilson@example.com',
            permission: ContentPermission.SHARED_VIEW,
            status: 'pending',
            createdAt: new Date(2023, 7, 10),
            expiresAt: new Date(2023, 8, 10),
            message: 'Please review this content when you have a chance.'
          }
        ]);
      } catch (error) {
        console.error('Failed to load sharing data:', error);
        setError('Failed to load sharing information. Please try again.');
      } finally {
        setIsLoading(false);
      }
    };
    
    loadSharingData();
  }, [contentId]);
  
  // Handle sending invitation
  const handleSendInvitation = async () => {
    if (!newInvitation.inviteeEmail) {
      setError('Please enter an email address.');
      return;
    }
    
    setIsLoading(true);
    setError(null);
    
    try {
      const contentService = getContentCreationService();
      
      // Create a complete invitation object
      const invitation: ContentSharingInvitation = {
        id: `inv-${Date.now()}`, // This would be generated by the server
        contentId,
        inviterId: newInvitation.inviterId || 'current-user-id',
        inviteeEmail: newInvitation.inviteeEmail,
        permission: newInvitation.permission || ContentPermission.SHARED_VIEW,
        status: 'pending',
        createdAt: new Date(),
        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now
        message: newInvitation.message
      };
      
      // In a real implementation, this would call the API
      // await contentService.shareContent(invitation);
      
      // For now, just update the local state
      setInvitations([...invitations, invitation]);
      
      toast({
        title: "Invitation sent",
        description: `An invitation has been sent to ${newInvitation.inviteeEmail}.`,
      });
      
      // Reset the form
      setNewInvitation({
        contentId,
        inviterId: 'current-user-id',
        inviteeEmail: '',
        permission: ContentPermission.SHARED_VIEW,
        message: `I'd like to share "${contentMetadata.title}" with you.`,
        status: 'pending'
      });
    } catch (error) {
      console.error('Failed to send invitation:', error);
      setError('Failed to send invitation. Please try again.');
      toast({
        variant: "destructive",
        title: "Invitation failed",
        description: "There was a problem sending the invitation.",
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  // Handle canceling invitation
  const handleCancelInvitation = async (invitationId: string) => {
    setIsLoading(true);
    setError(null);
    
    try {
      // In a real implementation, this would call the API
      // await contentService.cancelInvitation(invitationId);
      
      // For now, just update the local state
      setInvitations(invitations.filter(inv => inv.id !== invitationId));
      
      toast({
        title: "Invitation canceled",
        description: "The invitation has been canceled.",
      });
    } catch (error) {
      console.error('Failed to cancel invitation:', error);
      setError('Failed to cancel invitation. Please try again.');
      toast({
        variant: "destructive",
        title: "Cancellation failed",
        description: "There was a problem canceling the invitation.",
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  // Handle changing collaborator permission
  const handleChangePermission = async (userId: string, permission: ContentPermission) => {
    setIsLoading(true);
    setError(null);
    
    try {
      // In a real implementation, this would call the API
      // await contentService.updateCollaboratorPermission(contentId, userId, permission);
      
      // For now, just update the local state
      setCollaborators(collaborators.map(collab => 
        collab.id === userId ? { ...collab, permission } : collab
      ));
      
      toast({
        title: "Permission updated",
        description: "The collaborator's permission has been updated.",
      });
    } catch (error) {
      console.error('Failed to update permission:', error);
      setError('Failed to update permission. Please try again.');
      toast({
        variant: "destructive",
        title: "Update failed",
        description: "There was a problem updating the permission.",
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  // Handle removing collaborator
  const handleRemoveCollaborator = async (userId: string) => {
    setIsLoading(true);
    setError(null);
    
    try {
      // In a real implementation, this would call the API
      // await contentService.removeCollaborator(contentId, userId);
      
      // For now, just update the local state
      setCollaborators(collaborators.filter(collab => collab.id !== userId));
      
      toast({
        title: "Collaborator removed",
        description: "The collaborator has been removed.",
      });
    } catch (error) {
      console.error('Failed to remove collaborator:', error);
      setError('Failed to remove collaborator. Please try again.');
      toast({
        variant: "destructive",
        title: "Removal failed",
        description: "There was a problem removing the collaborator.",
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  // Format permission for display
  const formatPermission = (permission: ContentPermission) => {
    switch (permission) {
      case ContentPermission.PRIVATE:
        return 'Private';
      case ContentPermission.SHARED_VIEW:
        return 'Can View';
      case ContentPermission.SHARED_EDIT:
        return 'Can Edit';
      case ContentPermission.PUBLIC_VIEW:
        return 'Public View';
      case ContentPermission.PUBLIC_EDIT:
        return 'Public Edit';
      default:
        return permission;
    }
  };
  
  if (isLoading && !collaborators.length && !invitations.length) {
    return (
      <div className="flex items-centre justify-centre h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
      </div>
    );
  }
  
  return (
    <div className="content-sharing">
      {error && (
        <Alert variant="destructive" className="mb-4">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
      
      <div className="content-info mb-4">
        <h2 className="text-xl font-semibold">{contentMetadata.title}</h2>
        <p className="text-muted-foreground">
          Current permission: {formatPermission(contentMetadata.permission)}
        </p>
      </div>
      
      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="invite">
            <Mail className="h-4 w-4 mr-2" /> Invite People
          </TabsTrigger>
          <TabsTrigger value="manage">
            <Users className="h-4 w-4 mr-2" /> Manage Access
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="invite" className="p-4 border rounded-md mt-2">
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="inviteeEmail">Email Address</Label>
              <Input 
                id="inviteeEmail" 
                type="email"
                value={newInvitation.inviteeEmail} 
                onChange={(e) => setNewInvitation({ ...newInvitation, inviteeEmail: e.target.value })} 
                placeholder="colleague@example.com"
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="permission">Permission</Label>
              <Select 
                value={newInvitation.permission} 
                onValueChange={(value) => setNewInvitation({ ...newInvitation, permission: value as ContentPermission })}
              >
                <SelectTrigger id="permission">
                  <SelectValue placeholder="Select permission" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value={ContentPermission.SHARED_VIEW}>Can View</SelectItem>
                  <SelectItem value={ContentPermission.SHARED_EDIT}>Can Edit</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="message">Message (Optional)</Label>
              <Textarea 
                id="message" 
                value={newInvitation.message} 
                onChange={(e) => setNewInvitation({ ...newInvitation, message: e.target.value })} 
                placeholder="Add a message to your invitation"
              />
            </div>
            
            <div className="flex justify-end gap-2 mt-4">
              <Button variant="outline" onClick={onClose}>
                Cancel
              </Button>
              <Button 
                onClick={handleSendInvitation} 
                disabled={isLoading || !newInvitation.inviteeEmail}
              >
                <Share2 className="h-4 w-4 mr-2" />
                {isLoading ? 'Sending...' : 'Send Invitation'}
              </Button>
            </div>
            
            {invitations.length > 0 && (
              <div className="mt-6">
                <h3 className="text-lg font-medium mb-2">Pending Invitations</h3>
                <div className="space-y-2">
                  {invitations.map((invitation) => (
                    <div key={invitation.id} className="flex justify-between items-centre p-3 border rounded-md">
                      <div>
                        <p className="font-medium">{invitation.inviteeEmail}</p>
                        <p className="text-sm text-muted-foreground">
                          {formatPermission(invitation.permission)} • Sent {invitation.createdAt.toLocaleDateString()}
                        </p>
                      </div>
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        onClick={() => handleCancelInvitation(invitation.id)}
                        disabled={isLoading}
                      >
                        Cancel
                      </Button>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </TabsContent>
        
        <TabsContent value="manage" className="p-4 border rounded-md mt-2">
          <div className="space-y-4">
            <div className="space-y-2">
              <Label>Content Visibility</Label>
              <Select 
                value={contentMetadata.permission} 
                onValueChange={(value) => {
                  // In a real implementation, this would update the content metadata
                  toast({
                    title: "Permission updated",
                    description: `Content visibility changed to ${formatPermission(value as ContentPermission)}.`,
                  });
                }}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select visibility" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value={ContentPermission.PRIVATE}>Private</SelectItem>
                  <SelectItem value={ContentPermission.PUBLIC_VIEW}>Public (View Only)</SelectItem>
                  <SelectItem value={ContentPermission.PUBLIC_EDIT}>Public (Anyone Can Edit)</SelectItem>
                </SelectContent>
              </Select>
              <p className="text-sm text-muted-foreground mt-1">
                {contentMetadata.permission === ContentPermission.PRIVATE && 
                  "Only you and people you invite can access this content."}
                {contentMetadata.permission === ContentPermission.PUBLIC_VIEW && 
                  "Anyone with the link can view this content."}
                {contentMetadata.permission === ContentPermission.PUBLIC_EDIT && 
                  "Anyone with the link can view and edit this content."}
              </p>
            </div>
            
            <Separator />
            
            <div>
              <h3 className="text-lg font-medium mb-2">People with Access</h3>
              
              {/* Owner (current user) */}
              <div className="flex justify-between items-centre p-3 border rounded-md mb-2">
                <div className="flex items-centre gap-3">
                  <Avatar>
                    <AvatarImage src="https://api.dicebear.com/7.x/avataaars/svg?seed=Owner" />
                    <AvatarFallback>OU</AvatarFallback>
                  </Avatar>
                  <div>
                    <p className="font-medium">You</p>
                    <p className="text-sm text-muted-foreground">your.email@example.com</p>
                  </div>
                </div>
                <Badge>Owner</Badge>
              </div>
              
              {/* Collaborators */}
              {collaborators.map((collaborator) => (
                <div key={collaborator.id} className="flex justify-between items-centre p-3 border rounded-md mb-2">
                  <div className="flex items-centre gap-3">
                    <Avatar>
                      <AvatarImage src={collaborator.avatarUrl} />
                      <AvatarFallback>{collaborator.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>
                    </Avatar>
                    <div>
                      <p className="font-medium">{collaborator.name}</p>
                      <p className="text-sm text-muted-foreground">{collaborator.email}</p>
                    </div>
                  </div>
                  <div className="flex items-centre gap-2">
                    <Select 
                      value={collaborator.permission} 
                      onValueChange={(value) => handleChangePermission(collaborator.id, value as ContentPermission)}
                    >
                      <SelectTrigger className="w-[120px]">
                        <SelectValue placeholder="Permission" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value={ContentPermission.SHARED_VIEW}>Can View</SelectItem>
                        <SelectItem value={ContentPermission.SHARED_EDIT}>Can Edit</SelectItem>
                      </SelectContent>
                    </Select>
                    <Button 
                      variant="ghost" 
                      size="icon" 
                      onClick={() => handleRemoveCollaborator(collaborator.id)}
                      disabled={isLoading}
                    >
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              ))}
              
              {collaborators.length === 0 && (
                <p className="text-centre text-muted-foreground py-4">
                  No collaborators yet. Invite people to collaborate.
                </p>
              )}
            </div>
            
            <div className="flex justify-end gap-2 mt-4">
              <Button variant="outline" onClick={onClose}>
                Close
              </Button>
              <Button 
                onClick={() => setActiveTab('invite')}
              >
                <Share2 className="h-4 w-4 mr-2" />
                Invite People
              </Button>
            </div>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default ContentSharing;
